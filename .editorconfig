root = true

# All files
[*]
charset = utf-8
end_of_line = crlf
indent_style = space
insert_final_newline = true
tab_width = 4
trim_trailing_whitespace = true
indent_size = 4


[*.cs]

# Supprimer la suggestion de transformation des méthodes membres privées en static
dotnet_diagnostic.CA1822.severity = none

# Règle pour l'ajout du THIS pour indiquer que l'élément provient de la classe courante
dotnet_style_qualification_for_field = true:warning
dotnet_style_qualification_for_property = true:warning
dotnet_style_qualification_for_method = true:warning
dotnet_style_qualification_for_event = true:warning

# Règle pour les noms de classe en PascalCase
dotnet_naming_rule.classes_pascal_case.severity = warning
dotnet_naming_rule.classes_pascal_case.symbols = classes
dotnet_naming_rule.classes_pascal_case.style = pascal_case

dotnet_naming_symbols.classes.applicable_kinds = class
dotnet_naming_symbols.classes.applicable_accessibilities = public, internal, protected, private

dotnet_naming_style.pascal_case.capitalization = pascal_case

# Variables privées avec préfixe `_` (et camelCase)
dotnet_naming_rule.private_fields_with_underscore.severity = warning
dotnet_naming_rule.private_fields_with_underscore.symbols = private_fields
dotnet_naming_rule.private_fields_with_underscore.style = camel_case_with_underscore

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_fields.required_modifiers = readonly

dotnet_naming_style.camel_case_with_underscore.capitalization = camel_case
dotnet_naming_style.camel_case_with_underscore.required_prefix = _
dotnet_naming_style.camel_case_with_underscore.required_suffix =

# Nom des constantes en SCREAMING_CAMEL_CASE
dotnet_naming_rule.constants_screaming_case.severity = warning
dotnet_naming_rule.constants_screaming_case.symbols = constants
dotnet_naming_rule.constants_screaming_case.style = screaming_case

dotnet_naming_symbols.constants.applicable_kinds = field
dotnet_naming_symbols.constants.applicable_accessibilities = public, internal, private, protected
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.screaming_case.capitalization = all_upper
dotnet_naming_style.screaming_case.word_separator = _

# Propriétés en PascalCase
dotnet_naming_rule.properties_pascal_case.severity = warning
dotnet_naming_rule.properties_pascal_case.symbols = properties
dotnet_naming_rule.properties_pascal_case.style = pascal_case

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, protected, private

# Méthodes en PascalCase
dotnet_naming_rule.methods_pascal_case.severity = warning
dotnet_naming_rule.methods_pascal_case.symbols = methods
dotnet_naming_rule.methods_pascal_case.style = pascal_case

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, protected, private

# Utilisation des var (interdire sauf cas très spécifiques)
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = false:warning
csharp_style_var_elsewhere = false:warning